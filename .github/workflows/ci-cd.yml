name: CI/CD

on:
    push:
        branches:
            - main

jobs:
    lint_and_unit_test:
        name: Lint and Unit Test
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@main
              with:
                  fetch-depth: 0
            - name: Use Node.js
              uses: actions/setup-node@v2
              with:
                  node-version: 16.x
            - name: Install yarn
              run: npm install -g yarn
            - name: Get yarn cache directory path
              id: yarn-cache-dir-path
              run: echo "::set-output name=dir::$(yarn cache dir)"
            - name: Restore yarn cache
              id: yarn-cache
              uses: actions/cache@v2
              with:
                  path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-yarn-
            - name: Install Dependencies
              run: rm -rf node_modules && yarn install --frozen-lockfile
            - name: Lint
              run: yarn lint
            - name: Check Types
              run: yarn check-types
            - name: Unit test
              env:
                  FAUNA_ADMIN_KEY: ${{ secrets.FAUNA_ADMIN_KEY }}
              run: yarn test-ci

    generate_docs:
        name: Generate Documentation
        needs: lint_and_unit_test
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@main
              with:
                  fetch-depth: 0
            - name: Use Node.js
              uses: actions/setup-node@v2
              with:
                  node-version: 16.x
            - name: Install yarn
              run: npm install -g yarn
            - name: Get yarn cache directory path
              id: yarn-cache-dir-path
              run: echo "::set-output name=dir::$(yarn cache dir)"
            - name: Restore yarn cache
              id: yarn-cache
              uses: actions/cache@v2
              with:
                  path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-yarn-
            - name: Install Dependencies
              run: rm -rf node_modules && yarn install --frozen-lockfile
            - name: Generate Markdown documentation from TypeScript using typedoc
              run: yarn generate-docs
            - name: Set up git config
              run: |
                  git config user.name "GitHub Actions Bot"
                  git config user.email "<>"
            - name: Commit
              run: |
                  git add docs
                  git commit -m "docs: auto-generate docs in CI"
                  git push origin main

    release:
        name: Release
        needs: generate_docs
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@main
              with:
                  fetch-depth: 0
            - name: Use Node.js
              uses: actions/setup-node@v2
              with:
                  node-version: 16.x
            - name: Install yarn
              run: npm install -g yarn
            - name: Get yarn cache directory path
              id: yarn-cache-dir-path
              run: echo "::set-output name=dir::$(yarn cache dir)"
            - name: Restore yarn cache
              id: yarn-cache
              uses: actions/cache@v2
              with:
                  path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-yarn-
            - name: Install Dependencies
              run: rm -rf node_modules && yarn install --frozen-lockfile
            - name: Do semantic release
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
              run: npx semantic-release
